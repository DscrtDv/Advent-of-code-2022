#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include "../gnl/get_next_line.h"


int	ft_isupper(char c)
{
	return (c >= 'A' && c <= 'Z');
}

void	*ft_memcpy(void *dest, const void *src, size_t n)
{
	char		*d;
	const char	*s;

	d = (char *) dest;
	s = (char *) src;
	if (!s && !d)
		return (0);
	while (n--)
		*(d++) = *(s++);
	return (dest);
}

unsigned int	get_priority(char c)
{
	unsigned int	priority = 0;

	if (ft_isupper(c))
		return ((unsigned int) c - 38);
	return ((unsigned int) c - 96);
}

int		check_equal(char *s, char c)
{
	while(*s && c != '.')
	{
		if (*s == c)
			return (1);
		s++;
	}
	return (0);
}

void	replace_duplicate(char *s1, char *s2, char c)
{
	int i = 0;
	while (s1[i] && s2[i])
	{
		if (s1[i] == c)
			s1[i] = '.';
		if (s2[i] == c)
			s2[i] = '.';
		i++;
	}
}

int		compute_result(char *s1, char *s2)
{
	int result = 0, i = 0;

	while (s2[i])
	{
		if (check_equal(s1, s2[i]) && s2[i] != '.')
		{
			result += get_priority(s2[i]);
			replace_duplicate(s1, s2, s2[i]);
		}
		i++;
	}
	return result;
}

int		split_line(char *line, char *s1, char *s2)
{
	size_t	len = ft_strlen(line) / 2;
	int result = 0;

	s1 = (char *)malloc(sizeof(char) * len + 1);
	s2 = (char *)malloc(sizeof(char) * len + 1);
	if (!line || !s1 || !s2)
		return (0);

	ft_memcpy(s1, line, len);
	s1[len] = '\0';
	ft_memcpy(s2, line+len, len);
	s2[len] = '\0';
	result += compute_result(s1, s2);
	free(s1);
	free(s2);
	return (result);
}

int		part_II(char *l0, char *l1, char *l2)
{
	int result = 0;
	char *found = malloc(sizeof(char) * 50);
	if (!found)
		return (0);
	int i = 0;
	int index = 0;

	while (l1[i])
	{
		if (check_equal(l0, l1[i]) && l1[i] != '.')
		{
			found[index] = l1[i];
			replace_duplicate(l0, l1, l1[i]);
			index++;
		}
		i++;
	}
	i = 0;
	index = 0;
	
	while (l2[i])
	{
		if (check_equal(found, l2[i]) && l2[i] != '.')
		{
			result += get_priority(l2[i]);
			printf("found: %c \n", l2[i]);
			replace_duplicate(l0, l2, l2[i]);

		}
		i++;
	}
//	printf("s1: %s\ns2: %s\ns3: %s\narray: %s\nresult: %d\n", l0, l1, l2, found, result);
	return result;
}

int main(void)
{
	char	*s1;
	char 	*s2;
	char	*line;

	char *l0, *l1, *l2;
	int fd = open("src/input.txt",O_RDONLY);
	int i = 0, result = 0;
	int partII = 1;

	while (i < 100)
	{
		if (!partII)
		{
			line = get_next_line(fd);
			result += split_line(line, s1, s2);
			free(line);
		}
		else 
		{
			l0 = get_next_line(fd);
			l1 = get_next_line(fd);
			l2 = get_next_line(fd);
			printf("group %i \n", i);
			result += part_II(l0, l1, l2);
			free(l0);
			free(l1);
			free(l2);
		}
		i++;
	}
	printf("the total is: %d \n", result);
	return (0);
}
